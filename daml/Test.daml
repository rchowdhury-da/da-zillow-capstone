module Test where 

import Main
import Daml.Script

data LedgerParties = LedgerParties with
    alice : Party
    bob : Party

listingInfo = ListingInfo with address = "123 Main st"; bedrooms = 3; bathrooms = 2; square_feet = 800

bob_bid_price : Decimal
bob_bid_price = 500000.00

alice_ask_price : Decimal
alice_ask_price = 1000000.00

allocateParties : Script LedgerParties
allocateParties = do
  alice <- allocatePartyWithHint "Alice" (PartyIdHint "Alice")
  bob <- allocatePartyWithHint "Bob" (PartyIdHint "Bob")
  aliceId <- validateUserId "alice"
  bobId <- validateUserId "bob"

  pure (LedgerParties alice bob)


initialize : LedgerParties -> Script HomeListingId
initialize parties = do
    
    -- create listing
    aliceListing <- submit parties.alice do
      createCmd HomeListing with
        owner = parties.alice
        info = listingInfo
        ask_price = alice_ask_price
        observers = []

    -- share listing with bob
    submit parties.alice do exerciseCmd aliceListing $ ShareListing parties.bob

-- full workflow test with using initialize

full_workflow_test : Script ()
full_workflow_test = script do
  
  -- initialize parties
  parties <- allocateParties

  -- initialize a homelisting for Alice and share with Bob
  listingId <- initialize parties

  -- submit offer by Bob
  offerId <- submit parties.bob do
    exerciseCmd listingId $ SubmitOffer bob_bid_price parties.bob

  submit parties.alice do
    exerciseCmd offerId $ AcceptOffer
  
  pure ()

-- testing query contracts

test_query_contracts : Script ()

test_query_contracts = script do

  -- initialize parties
  parties <- allocateParties

  -- initialize a homelisting and share with bob
  listingId <- initialize parties

  -- bob creates 2 offers 
  offerId <- submit parties.bob do  
    exerciseCmd listingId $ SubmitOffer 30000.0 parties.bob

  offerId2 <- submit parties.bob do
    exerciseCmd listingId $ SubmitOffer 500000.0 parties.bob

  -- query contracts visible to alice
  contracts <- query @ListingOffer parties.alice

  assertMsg "Alice should have be able to view 2 contracts" (length contracts == 2) 

  pure ()



-- Unhappy paths start
testUnhappyPaths : Script ()

testUnhappyPaths = script do

  parties <- allocateParties

  -- homelisting with ask price not greater than 0.0
  submitMustFail parties.alice do
  createCmd HomeListing with
    owner = parties.alice
    info = listingInfo
    ask_price = 0.0
    observers = [parties.bob]

testUnhappyPaths2 : Script ()

testUnhappyPaths2 = script do

  parties <- allocateParties

  listingId <- initialize parties

  -- changing ask price to a price not greater than 0.0
  submitMustFail parties.alice do
    exerciseCmd listingId $ ChangeAskPrice 0.0

  pure ()


testUnhappyPaths3 : Script ()

testUnhappyPaths3 = script do

  parties <- allocateParties

  listingId <- initialize parties

  -- bob submitting an offer with bid_price that is not greater than 0.0
  submitMustFail parties.bob do
    exerciseCmd listingId $ SubmitOffer 0.0 parties.bob

  pure ()

-- Unhappy paths end


-- happy paths start 


testHappyPaths : Script ()

testHappyPaths = script do

  parties <- allocateParties

  listingId <- initialize parties

  submit parties.alice do
    exerciseCmd listingId $ ChangeAskPrice 500.0

  pure ()

testHappyPaths2 : Script ()

testHappyPaths2 = script do

  parties <- allocateParties

  listingId <- initialize parties

  offerId <- submit parties.bob do
    exerciseCmd listingId $ SubmitOffer 30000.0 parties.bob
  
  submit parties.alice do
    exerciseCmd offerId $ RejectOffer

  pure ()


testHappyPaths3 : Script ()

testHappyPaths3 = script do

  parties <- allocateParties

  listingId <- initialize parties

  offerId <- submit parties.bob do
    exerciseCmd listingId $ SubmitOffer 30000.0 parties.bob
  
  submit parties.alice do
    exerciseCmd offerId $ AcceptOffer

  pure ()

  -- happy path end